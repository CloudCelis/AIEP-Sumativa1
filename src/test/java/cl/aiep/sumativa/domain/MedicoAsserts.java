package cl.aiep.sumativa.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicoAllPropertiesEquals(Medico expected, Medico actual) {
        assertMedicoAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicoAllUpdatablePropertiesEquals(Medico expected, Medico actual) {
        assertMedicoUpdatableFieldsEquals(expected, actual);
        assertMedicoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicoAutoGeneratedPropertiesEquals(Medico expected, Medico actual) {
        assertThat(expected)
            .as("Verify Medico auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicoUpdatableFieldsEquals(Medico expected, Medico actual) {
        assertThat(expected)
            .as("Verify Medico relevant properties")
            .satisfies(e -> assertThat(e.getMedicoId()).as("check medicoId").isEqualTo(actual.getMedicoId()))
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getApellidoPaterno()).as("check apellidoPaterno").isEqualTo(actual.getApellidoPaterno()))
            .satisfies(e -> assertThat(e.getApellidoMaterno()).as("check apellidoMaterno").isEqualTo(actual.getApellidoMaterno()))
            .satisfies(e -> assertThat(e.getEspecialidad()).as("check especialidad").isEqualTo(actual.getEspecialidad()))
            .satisfies(e -> assertThat(e.getTelefono()).as("check telefono").isEqualTo(actual.getTelefono()))
            .satisfies(e -> assertThat(e.getCorreo()).as("check correo").isEqualTo(actual.getCorreo()))
            .satisfies(e -> assertThat(e.getCentroSaludId()).as("check centroSaludId").isEqualTo(actual.getCentroSaludId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicoUpdatableRelationshipsEquals(Medico expected, Medico actual) {
        assertThat(expected)
            .as("Verify Medico relationships")
            .satisfies(e -> assertThat(e.getCentrosSalud()).as("check centrosSalud").isEqualTo(actual.getCentrosSalud()));
    }
}
